<!DOCTYPE html>  
<html lang="en">  
<head>  
    <meta charset="UTF-8">  
    <meta name="viewport" content="width=device-width, initial-scale=1.0">  
    <title>Logoglyph Generator</title>  
    <script src="https://cdn.jsdelivr.net/npm/p5@1.4.0/lib/p5.js"></script>  
    <style>  
        body { display: flex; flex-direction: column; align-items: center; }  
        button { margin: 5px; }  
        canvas { border: 1px solid black; }  
    </style>  
</head>  
<body>  

    <button onclick="undo()">Undo</button>  
    <button onclick="redo()">Redo</button>  
    <button onclick="clearCanvas()">Clear Canvas</button>  
    Sections: <input type="number" id="numSections" value="24" min="1" onchange="updateSections()">  
    <button onclick="saveCanvas()">Save as Image</button>  

    <script>  
        const MAX_HISTORY = 10;   
        let history = [];  
        let currentHistoryIndex = -1;  
        let numSections = 24;   
        let prevMouseX, prevMouseY;  
        let isDrawing = false;  

        function setup() {  
            createCanvas(800, 800);  
            clear();  
        }  

        function draw() {  
            translate(width / 2, height / 2);  
            noFill();  
            strokeWeight(10);  
            stroke(0);  
            ellipse(0, 0, 600, 600); // Draw outer circle  

            let angleStep = 360 / numSections;  

            // Draw section lines  
            for (let i = 0; i < numSections; i++) {  
                line(0, 0, 600 * cos(i * angleStep), 600 * sin(i * angleStep));  
            }  

            // Draw ink blots from history  
            if (currentHistoryIndex >= 0) {  
                image(history[currentHistoryIndex], -width / 2, -height / 2);  
            }  

            // Create calligraphy stroke  
            if (mouseIsPressed) {  
                noFill();  
                strokeWeight(10);  
                stroke(0);  
                let currentX = mouseX - width / 2;  
                let currentY = mouseY - height / 2;  

                if (isDrawing) {  
                    let speed = dist(currentX, currentY, prevMouseX, prevMouseY);  
                    strokeWeight(map(speed, 0, 50, 20, 5));  
                    line(prevMouseX, prevMouseY, currentX, currentY);  

                    // Draw mirrored lines  
                    for (let i = 1; i < numSections; i++) {  
                        let angle = i * angleStep;  
                        let x2 = currentX * cos(angle) - currentY * sin(angle);  
                        let y2 = currentX * sin(angle) + currentY * cos(angle);  
                        line(prevMouseX * cos(angle) - prevMouseY * sin(angle), prevMouseX * sin(angle) + prevMouseY * cos(angle), x2, y2);  
                    }  
                } else {  
                    prevMouseX = currentX;  
                    prevMouseY = currentY;  
                    isDrawing = true;  
                }  
                prevMouseX = currentX;  
                prevMouseY = currentY;  

                // Save current state to history  
                history.push(get());  
                currentHistoryIndex++;  

                // Limit history to MAX_HISTORY entries  
                if (history.length > MAX_HISTORY) {  
                    history.shift();  
                    currentHistoryIndex--;  
                }  
            } else {  
                isDrawing = false;  
            }  
        }  

        function undo() {  
            if (currentHistoryIndex > 0) {  
                currentHistoryIndex--;  
            }  
        }  

        function redo() {  
            if (currentHistoryIndex < history.length - 1) {  
                currentHistoryIndex++;  
            }  
        }  

        function updateSections() {  
            numSections = parseInt(document.getElementById('numSections').value);  
            numSections = max(1, numSections);  
        }  

        function clearCanvas() {  
            clear();  
            history = [];  
            currentHistoryIndex = -1;  
        }  

        function saveCanvas() {  
            saveCanvas('logoglyph', 'png');  
        }  
    </script>  
</body>  
</html>
